<?php

use PHPUnit\Framework\TestCase;

class UserTest extends TestCase
{
    /** @var User */
    private $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = new User();
    }

    function testEmptyName() {
        // Adding trim here because we are adding the space in getFullName.
        $this->assertEmpty($this->user->getFullName());
    }

    /**
     * Second way to writing php test cases.
     * @test
     */
    function check_empty_name() {
        // Adding trim here because we are adding the space in getFullName.
        $this->assertEmpty($this->user->getFullName());
    }

    function testGetFullNameAndReturnNothing() {
        $this->user->first_name = 'Zakir';
        $this->user->last_name = 'Mohammad';

        $expected = 'Zakir Mohammad';

        $this->assertEquals($expected, $this->user->getFullName());
    }



    public function testNotifyIsSent() {
        $user = new User();
        $user->email = "test@exmple.com";
        $mailerMocked = $this->createMock(Mailer::class);
        $mailerMocked->expects($this->once())->
        method('sendEmail')->
        with($this->equalTo('test@exmple.com'), $this->equalTo('Hello')) ->
        willReturn(true);

        $user->setMailer($mailerMocked);

        $this->assertTrue($user->notify('Hello'));
    }

    public function testCanNotNotifyUserWithNoEmail() {
        $user = new User();
        $user->email = "";
        $mailerMocked = $this->getMockBuilder(Mailer::class)->onlyMethods(['transfer'])->getMock();
        $mailerMocked
            ->method('sendEmail')
            ->will($this->throwException(new Exception()));
        $user->setMailer($mailerMocked);
        $this->expectException(Exception::class);
        $user->notify('Hello');
    }

}
